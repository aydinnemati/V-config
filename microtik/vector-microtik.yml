---
sources:
  src_microtik:
    type: vector
    acknowledgements: false
    address: 0.0.0.0:6000
    version: "1"

transforms:
  tran_microtik:
    type: lua
    inputs:
      - src_microtik
    version: '2'
    hooks:
      process: |-
        function (event, emit)
          if string.find(event.log.message, "firewall,info forward:") then
            local input = string.match(event.log.message, "in:([^ ]*)")
            local output = string.match(event.log.message, "out:([^ ]*),")
            local src_mac = string.match(event.log.message, "%w+:%w+:%w+:%w+:%w+:%w+")
            local protocol, security_flag = string.match(event.log.message, "proto ([^ ]*) ([^ ]*),")
            local private_ip, private_port = string.match(event.log.message, ", ([^ ]*):([^ ]*)->")
            local public_ip, public_port = string.match(event.log.message, "->([^ ]*):([^ ]*),")
            local lenght = string.match(event.log.message, ", len ([^ ]*)")
            event.log.lenght = lenght
            event.log.private_port = private_port
            event.log.public_port = public_port
            event.log.private_ip = private_ip
            event.log.public_ip = public_ip
            event.log.protocol = protocol
            event.log.security_flag = security_flag
            event.log.src_mac = src_mac
            event.log.input = input
            event.log.output = output
            event.log.timestamp = os.date('%Y-%m-%d %H:%M:%S', os.time(event.log.timestamp))
          end
          emit(event)
        end

sinks:
  sink_microtik_nat:
    type: clickhouse
    inputs:
      - tran_microtik
    database: logs
    endpoint: http://10.0.23.222:8123
    table: microtik_nat
    compression: gzip
    encoding: default
    healthcheck: false
    skip_unknown_fields: false

  sink_cisco_3750:
    type: console
    inputs:
      - tran_microtik
    target: stdout
    encoding: json
